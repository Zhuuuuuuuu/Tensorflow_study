import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt

#生成200个随机点，并改变它的形状为200行一列
x_data = np.linspace(-0.5,0.5,200)[:,np.newaxis]
noise = np.random.normal(0,0.02,x_data.shape)
y_data = np.square(x_data) + noise

# print(x_data.shape)
# type(x_data)
# print(noise.shape)

# 定义两个占位符

x = tf.placeholder(tf.float32,[None,1])
y = tf.placeholder(tf.float32,[None,1])

# 定义中间的层
Weights_l1 = tf.Variable(tf.random_normal([1,10]))
bias_l1 = tf.Variable(tf.zeros([1,10]))
Wx_plus_b_l1 = tf.matmul(x,Weights_l1) + bias_l1

# 激活函数
L1 = tf.nn.tanh(Wx_plus_b_l1)

#定义输出层
Weight_l2 = tf.Variable(tf.random_normal([10,1]))
bias_l2 = tf.Variable(tf.zeros([1,1]))
Wx_plus_b_l2 = tf.matmul(L1,Weight_l2) + bias_l2

prediction = tf.nn.tanh(Wx_plus_b_l2)

#二次代价函数
loss = tf.reduce_mean(tf.square(y - prediction))

train_step = tf.train.AdagradOptimizer(0.2).minimize(loss)

with tf.Session() as sess:
    sess.run(tf.global_variables_initializer())
    for i in range(2000):
        sess.run(train_step,feed_dict={x:x_data,y:y_data})

    prediction_value = sess.run(prediction,feed_dict={x:x_data})

    plt.figure()
    plt.scatter(x_data,y_data)
    plt.plot(x_data,prediction_value,'r-',lw = 5)
    plt.show()
